# cliffy v1 template
manifestVersion: v1

# The name of the CLI
# This will be used as the script name when invoking the CLI from the command line.
name: hello 

# The version of the CLI
# This should follow the standard semantic versioning format (e.g., 'MAJOR.MINOR.PATCH').
version: 0.1.0

# A string block or list of strings containing any module imports
# These can be used to import any python modules that the CLI depends on.
imports:
    - import os
    - |
        from collections import defaultdict
        import re

# A list containing any helper functions
# Each element of the list can be a separate function
# These functions should be defined as strings that can be executed by the Python interpreter.
functions:
    - |
        def greet(name: str):
            print("hello " + name")

# A dictionary containing any shared type definitions
# These types can be referenced by name in the args section to provide type annotations for params and options defined in the args section.
types:
    - Language: str = typer.Option(help="Language to greet in", prompt=True)

# A dictionary containing the arguments and options for each command
# Each key in the dictionary should correspond to a command in the commands section
# The value should be a list of dictionaries representing the params and options for that command.
args:
    greet: [-n|--name: str!]                      # a REQUIRED option
    greet.all: 
        - names: str!                             # a REQUIRED param as denoted by the ! at the end
        - mood: str = "happy"                     # an OPTIONAL param that defaults to "happy"
        - -l|--language: Language = "english"     # an option that uses custom Language type as arg definition and defaults to "english"

# A dictionary containing the command definitions for the CLI
# Each command should have a unique key- which can be either a group command or nested subcommands
# Nested subcommands are joined by '.' in between each level
# A special (*) wildcard can be used to spread the subcommand to all group-level commands
# The value is the python code to run when the command is called OR a list of bash commands to run (prefixed with $).
commands:
    # this is a parent command that will get invoked with: hello list
    greet: |
        """
        Help text for list
        """
        print("hello from python")
        $ echo "i can also prefix lines with $ to run bash commands"
    
    # this is a nested command that will get invoked with: hello list all
    greet.all: 
        - help: Help text for list.all       # you can also define help text like this
        - $ echo "hello all"                 # this is a bash command that will get converted to python subprocess call
        - print("greetings from python")     # this python code will get directly invoked

