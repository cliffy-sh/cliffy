```yaml
manifestVersion: v3
name: school-uni-todo
version: 0.1.0
help: Manage school and university TODO tasks.
requires:
- typer
- rich
- sqlalchemy
- sqlite3
imports:
- import typer
- from rich.console import Console
- from rich.table import Table
- from sqlalchemy import create_engine, Column, Integer, String, Boolean
- from sqlalchemy.orm import sessionmaker, declarative_base
- from typing import Optional
- from datetime import datetime
functions: |
  Base = declarative_base()

  class Task(Base):
      __tablename__ = "tasks"
      id = Column(Integer, primary_key=True, index=True)
      group = Column(String, index=True)
      description = Column(String, index=True)
      due_date = Column(String, nullable=True)  # Store due date as string
      completed = Column(Boolean, default=False)

  console = Console()
  engine = create_engine("sqlite:///tasks.db")
  Base.metadata.create_all(engine)
  SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
  db = SessionLocal()

  def add_task(group: str, description: str, due_date: Optional[str] = None):
      task = Task(group=group, description=description, due_date=due_date, completed=False)
      db.add(task)
      db.commit()
      console.print(f"[green]Added task: {description} to group: {group}[/green]")

  def list_tasks(group: str, completed: bool = False):
      tasks = db.query(Task).filter(Task.group == group, Task.completed == completed).all()
      table = Table("ID", "Description", "Due Date", "Completed")
      for task in tasks:
          due_date_formatted = task.due_date  # Display as is
          table.add_row(str(task.id), task.description, due_date_formatted, str(task.completed))
      console.print(table)

  def complete_task(task_id: int):
      task = db.query(Task).filter(Task.id == task_id).first()
      if task:
          task.completed = True
          db.commit()
          console.print(f"[green]Marked task {task_id} as complete.[/green]")
      else:
          console.print(f"[red]Task {task_id} not found.[/red]")

  def remove_task(task_id: int):
      task = db.query(Task).filter(Task.id == task_id).first()
      if task:
          db.delete(task)
          db.commit()
          console.print(f"[green]Removed task {task_id}.[/green]")
      else:
          console.print(f"[red]Task {task_id} not found.[/red]")

commands:
  school:
    add:
      params:
      - name: description
        type: str
      - name: due_date
        type: Optional[str]
      run: |
        add_task("school", description, due_date)
    list:
      params:
        - name: completed
          type: bool
          default: False
      run: |
        list_tasks("school", completed)
    complete:
      params:
        - name: task_id
          type: int
      run: |
        complete_task(task_id)
    remove:
      params:
        - name: task_id
          type: int
      run: |
        remove_task(task_id)
  university:
    add:
      params:
      - name: description
        type: str
      - name: due_date
        type: Optional[str]
      run: |
        add_task("university", description, due_date)
    list:
      params:
        - name: completed
          type: bool
          default: False
      run: |
        list_tasks("university", completed)
    complete:
      params:
        - name: task_id
          type: int
      run: |
        complete_task(task_id)
    remove:
      params:
        - name: task_id
          type: int
      run: |
        remove_task(task_id)
examples:
- command: school add "Finish math homework" --due-date "2024-07-20"
- command: university add "Start history essay"
- command: school list
- command: university list --completed True
- command: school complete 1
- command: university remove 2

```